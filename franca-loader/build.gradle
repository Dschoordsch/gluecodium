/*
 * Copyright (C) 2016-2019 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

plugins {
    id "de.undercouch.download" version "3.4.3"
}

dependencies {
    compile project(":lime-runtime")

    compile files({ tasks.unzipFrancaZip.extractedJars })

    compile 'com.google.inject:guice:3.0'
    compile 'commons-io:commons-io:2.5'
    compile 'log4j:log4j:1.2.17'
    compile 'org.apache.commons:commons-text:1.1'
    compile 'org.eclipse.platform:org.eclipse.core.runtime:3.15.200'
    compile 'org.eclipse.xtext:org.eclipse.xtext.generator:2.17.1'
    compile 'org.eclipse.xtext:org.eclipse.xtext.util:2.17.1'
    compile 'org.eclipse.xtext:org.eclipse.xtext:2.17.1'
    compile 'org.jetbrains.kotlin:kotlin-stdlib:1.3.21'
    compile 'org.jetbrains:annotations:13.0'

    // list transitive dependencies here to lock the version, obtained by
    // ../gradlew dependencies | grep -o -e '--- .*\[.*,.*) -> .*' | \
    // sed 's/--- /compile '\''/; s/\[.*) -> //; s/ (\*)//; s/$/'\''/' | sort | uniq
    compile 'org.eclipse.emf:org.eclipse.emf.codegen:2.14.0'
    compile 'org.eclipse.emf:org.eclipse.emf.common:2.15.0'
    compile 'org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.15.0'
    compile 'org.eclipse.emf:org.eclipse.emf.ecore:2.15.0'
    compile 'org.eclipse.jdt:org.eclipse.jdt.core:3.17.0'
    compile 'org.eclipse.jdt:org.eclipse.jdt.debug:3.12.200'
    compile 'org.eclipse.jdt:org.eclipse.jdt.launching:3.13.0'
    compile 'org.eclipse.platform:org.eclipse.core.commands:3.9.300'
    compile 'org.eclipse.platform:org.eclipse.core.contenttype:3.7.300'
    compile 'org.eclipse.platform:org.eclipse.core.expressions:3.6.300'
    compile 'org.eclipse.platform:org.eclipse.core.filesystem:1.7.300'
    compile 'org.eclipse.platform:org.eclipse.core.jobs:3.10.300'
    compile 'org.eclipse.platform:org.eclipse.core.resources:3.13.300'
    compile 'org.eclipse.platform:org.eclipse.core.runtime:3.15.200'
    compile 'org.eclipse.platform:org.eclipse.core.variables:3.4.400'
    compile 'org.eclipse.platform:org.eclipse.debug.core:3.13.200'
    compile 'org.eclipse.platform:org.eclipse.equinox.app:1.4.100'
    compile 'org.eclipse.platform:org.eclipse.equinox.common:3.10.300'
    compile 'org.eclipse.platform:org.eclipse.equinox.preferences:3.7.300'
    compile 'org.eclipse.platform:org.eclipse.equinox.registry:3.8.300'
    compile 'org.eclipse.platform:org.eclipse.osgi:3.13.300'
    compile 'org.eclipse.platform:org.eclipse.text:3.8.100'

    testCompile files({ project(":lime-runtime").sourceSets.test.output })
    testCompile 'io.mockk:mockk-dsl-jvm:1.8.13'
    testCompile 'io.mockk:mockk:1.8.13'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.9.0'
    testCompile 'org.powermock:powermock-api-mockito2:1.7.0'
    testCompile 'org.powermock:powermock-core:1.7.0'
    testCompile 'org.powermock:powermock-module-junit4:1.7.0'
}

task downloadFrancaZip(type: Download) {
    src 'https://github.com/franca/franca/releases/download/v0.13.1/site_franca_0.13.1.201807231814.zip'
    dest file("$buildDir/franca.zip")
    overwrite true
    onlyIfModified true
}

task unzipFrancaZip(dependsOn: downloadFrancaZip, type: Sync) {
    def extractDir = "$buildDir/libs"
    ext.extractedJars = fileTree(extractDir) {
        include 'plugins/org.franca.core_*.jar',
                'plugins/org.franca.core.dsl_*.jar',
                'plugins/org.franca.deploymodel.dsl_*.jar'
        builtBy 'unzipFrancaZip'
    }

    from zipTree(downloadFrancaZip.dest)
    into extractDir
}

compileJava.dependsOn unzipFrancaZip
compileKotlin.dependsOn unzipFrancaZip

jar {
    from {
        tasks.unzipFrancaZip.extractedJars.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

apply from: "$rootDir/gradle/spotless.gradle"

apply plugin: 'jacoco'
jacoco {
    toolVersion = '0.8.1'
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            limit {
                counter = 'LINE'
                minimum = 0.90
            }
        }
    }
}

project.ext.longName = 'Genium Franca loader'
apply from: "$rootDir/gradle/publishing.gradle"
