# Copyright (C) 2016-2019 HERE Europe B.V.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package test

class PlainDataStructures {
    // Basic struct type
    struct Point {
        x: Double = 0.0
        y: Double = 0.0
    }
    // Basic struct type
    struct Color {
        red: UByte = 0
        green: UByte = 0
        blue: UByte = 0
    }
    // Nested struct type
    struct Line {
        a: Point
        b: Point
    }
    // Nested struct type
    struct ColoredLine {
        line: Line
        color: Color
    }
    // Struct type containing all builtin and a custom data type
    struct AllTypesStruct {
        int8Field: Byte = 0
        uint8Field: UByte = 0
        int16Field: Short = 0
        uint16Field: UShort = 0
        int32Field: Int = 0
        uint32Field: UInt = 0
        int64Field: Long = 0
        uint64Field: ULong = 0
        floatField: Float = 0.0
        doubleField: Double = 0.0
        stringField: String = ""
        booleanField: Boolean = false
        bytesField: Blob
        pointField: Point
    }
    // Immutable struct type containing all builtin and a custom data type
    @Immutable
    @Java(Builder)
    struct AllTypesImmutableStruct {
        int8Field: Byte
        uint8Field: UByte
        int16Field: Short
        uint16Field: UShort
        int32Field: Int
        uint32Field: UInt
        int64Field: Long
        uint64Field: ULong
        floatField: Float
        doubleField: Double
        stringField: String
        booleanField: Boolean
        bytesField: Blob
        pointField: Point
    }
    struct NestingImmutableStruct {
        structField: AllTypesImmutableStruct
    }
    struct DoubleNestingImmutableStruct {
        nestingStructField: NestingImmutableStruct
    }
    struct StructWithArrayOfImmutable {
        arrayField: ArrayOfImmutable
    }
    typealias ArrayOfImmutable = List<AllTypesImmutableStruct>
    typealias MapToImmutableStruct = Map<Int, AllTypesImmutableStruct>
    static fun MapOfImmutablesRoundTrip(
        input: MapToImmutableStruct
    ): MapToImmutableStruct
    // Static method to create a point
    static fun createPoint(
        x: Double,
    
        y: Double
    ): Point
    // Static method to exchange x and y values of a point
    static fun swapPointCoordinates(
        input: Point
    ): Point
    // Static test method which creates a colored line
    static fun createLine(
        pointA: Point,
    
        pointB: Point
    ): Line
    // Static test method which creates a colored line
    static fun createColoredLine(
        line: Line,
    
        color: Color
    ): ColoredLine
    // Static test method which returns a colored line unmodified
    static fun returnColoredLine(
        input: ColoredLine
    ): ColoredLine
    // Static test method which returns AllTypesStruct unmodified
    static fun returnAllTypesStruct(
        input: AllTypesStruct
    ): AllTypesStruct
    // Static test method which modifies the AllTypesStruct
    static fun modifyAllTypesStruct(
        input: AllTypesStruct
    ): AllTypesStruct
    // Static test method which checks that all fields in the Point struct are initialized in C++
    static fun checkAllFieldsAreInitialized(): Boolean
}
