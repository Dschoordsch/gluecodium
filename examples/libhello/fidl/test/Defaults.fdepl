/*
 * Copyright (C) 2016-2019 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

import "classpath:/GeniumExtensions.fdepl"
import "./Defaults.fidl"

define GeniumExtensions for interface test.Defaults
{
    struct ImmutableStructWithDefaults {
        Immutable = true
    }

    struct NullableStructWithDefaults {
        intField { Nullable = true }
        uintField { Nullable = true }
        floatField { Nullable = true }
        boolField { Nullable = true }
        stringField { Nullable = true }
        enumField { Nullable = true }
    }

    struct StructWithDefaults {
        Equatable = true
    }

    struct StructWithSingleNullableField {
        nullableField { Nullable = true }
    }

    method getDefault {
        Static = true
    }

    method checkDefault {
        Static = true
    }

    method getImmutableDefault {
        Static = true
    }

    method isNan:float {
        Static = true
    }

    method isNan:double {
        Static = true
    }

    method isInfinity:float {
        Static = true
    }

    method isInfinity:double {
        Static = true
    }

    method createSpecial {
        Static = true
    }

    method getNullableDefaults {
        Static = true
    }

    method getEmptyDefaults {
        Static = true
    }

    array StringSet { IsSet = true }
}

define Defaults for interface test.Defaults
{
    struct StructWithDefaults {
        intField {
            DefaultValue = "42"
        }
        uintField {
            DefaultValue = "4294967295"
        }
        floatField {
            DefaultValue = "3.14"
        }
        boolField {
            DefaultValue = "true"
        }
        stringField {
            DefaultValue = "some string"
        }
        enumField {
            DefaultValue = "BarValue"
        }
    }

    struct NullableStructWithDefaults {
        intField { DefaultIsNull = true }
        uintField { DefaultIsNull = true }
        floatField { DefaultIsNull = true }
        boolField { DefaultIsNull = true }
        stringField { DefaultIsNull = true }
        enumField { DefaultIsNull = true }
    }

    struct StructWithExternalDefaults {
        enumField {
            DefaultValue = "Another_Value"
        }
    }

    struct ImmutableStructWithDefaults {
        intField {
            DefaultValue = "42"
        }
        floatField {
            DefaultValue = "3.14"
        }
        stringField {
            DefaultValue = "some string"
        }
        enumField {
            DefaultValue = "BarValue"
        }
    }

    struct StructWithSpecialDefaults {
        floatNanField {
            DefaultValue = "NaN"
        }
        floatInfinityField {
            DefaultValue = "Infinity"
        }
        floatNegativeInfinityField {
            DefaultValue = "-Infinity"
        }
        doubleNanField {
            DefaultValue = "NaN"
        }
        doubleInfinityField {
            DefaultValue = "Infinity"
        }
        doubleNegativeInfinityField {
            DefaultValue = "-Infinity"
        }
    }

    struct StructWithEmptyDefaults {
        intsField {
            DefaultIsEmpty = true
        }
        floatsField {
            DefaultIsEmpty = true
        }
        mapField {
            DefaultIsEmpty = true
        }
        structField {
            DefaultIsEmpty = true
        }
        setTypeField {
            DefaultIsEmpty = true
        }
        otherStructField {
            DefaultIsEmpty = true
        }
    }

    struct StructWithSingleNullableField {
        nullableField {
            DefaultIsNull = true
        }
    }

    struct StructWithTypedefDefaults {
        intField {
            DefaultValue = "42"
        }
        boolField {
            DefaultValue = "true"
        }
        stringField {
            DefaultValue = "\\Jonny \"Magic\" Smith\n"
        }
        enumField {
            DefaultValue = "BarValue"
        }
    }
}

define ExternalTypes for interface test.Defaults
{
    enumeration ExternalEnum {
        ExternalType = "include/ExternalTypes.h"
        ExternalName = "::external::even_more_external::VeryAlienEnum"
    }
}

