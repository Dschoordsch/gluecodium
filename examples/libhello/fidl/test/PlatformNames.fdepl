/*
 * Copyright (C) 2016-2019 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

import "classpath:/GeniumExtensions.fdepl"
import "./PlatformNames.fidl"

define Names for typeCollection test.PlatformNames
{
    CppName = "fooTypes"
    SwiftName = "bazTypes"

    struct BasicStruct {
        CppName = "fooStruct"
        JavaName = "barStruct"
        SwiftName = "bazStruct"
        stringField {
            CppName = "FOO_FIELD"
            JavaName = "BAR_FIELD"
            SwiftName = "BAZ_FIELD"
        }
    }

    enumeration BasicEnum {
        CppName = "fooEnum"
        JavaName = "barEnum"
        SwiftName = "bazEnum"
        BASIC_ITEM {
            CppName = "foo_item"
            JavaName = "bar_item"
            SwiftName = "BAZ_ITEM"
        }
    }

    typedef BasicTypedef {
        CppName = "fooTypedef"
        SwiftName = "bazTypedef"
    }

    array BasicArray {
        CppName = "fooArray"
        JavaName = "barArray"
        SwiftName = "bazArray"
    }
}

define GeniumExtensions for typeCollection test.PlatformNames
{
    struct BasicStruct { Companion = "test.BasicStructCompanion" }
}

define Names for interface test.PlatformNamesInterface
{
    CppName = "fooInterface"
    JavaName = "barInterface"
    SwiftName = "bazInterface"

    method basicMethod {
        CppName = "FooMethod"
        JavaName = "BarMethod"
        SwiftName = "BazMethod"
        in {
            basicParameter {
                CppName = "FooParameter"
                JavaName = "BarParameter"
                SwiftName = "BazParameter"
                SwiftArgumentLabel = "_"
            }
        }
    }

    method create {
        CppName = "make"
        JavaName = "make"
        SwiftName = "make"
        in {
            basicParameter {
                CppName = "makeParameter"
                JavaName = "makeParameter"
                SwiftName = "makeParameter"
                SwiftArgumentLabel = "_"
            }
        }
    }

    attribute basicAttribute {
        CppGetterName = "GET_FOO_ATTRIBUTE"
        CppSetterName = "SET_FOO_ATTRIBUTE"
        JavaGetterName = "GET_BAR_ATTRIBUTE"
        JavaSetterName = "SET_BAR_ATTRIBUTE"
        SwiftName = "BAZ_ATTRIBUTE"
    }
}

define GeniumExtensions for interface test.PlatformNamesInterface
{
    method basicMethod { Static = true }

    method create { Constructor = true }
}

define Names for interface test.PlatformNamesListener
{
    CppName = "fooListener"
    JavaName = "barListener"
    SwiftName = "bazListener"

    method basicMethod {
        CppName = "FooMethod"
        JavaName = "BarMethod"
        SwiftName = "BazMethod"
        in {
            basicParameter {
                CppName = "FooParameter"
                JavaName = "BarParameter"
                SwiftName = "BazParameter"
                SwiftArgumentLabel = "_"
            }
        }
    }
}

define GeniumExtensions for interface test.PlatformNamesListener
{
    IsInterface = true
}

define Names for interface test.BasicStructCompanion
{
    method make {
        CppName = "create"
        in {
            basicParameter {
                CppName = "FooParameter"
                JavaName = "BarParameter"
                SwiftName = "BazParameter"
                SwiftArgumentLabel = "_"
            }
        }
    }
}

define GeniumExtensions for interface test.BasicStructCompanion
{
    method make { Constructor = true }
}
