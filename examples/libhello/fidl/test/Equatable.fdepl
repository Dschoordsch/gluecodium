/*
 * Copyright (C) 2016-2019 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

import "classpath:/GeniumExtensions.fdepl"
import "./Equatable.fidl"

define GeniumExtensions for typeCollection test.Equatable {
    struct EquatableStruct {
        Equatable = true
        JavaBuilder = true
    }

    struct EquatableNullableStruct {
        Equatable = true
        JavaBuilder = true

        boolField {
            Nullable = true
        }
        intField {
            Nullable = true
        }
        uintField {
            Nullable = true
        }
        floatField {
            Nullable = true
        }
        stringField {
            Nullable = true
        }
        structField {
            Nullable = true
        }
        enumField {
            Nullable = true
        }
        mapField {
            Nullable = true
        }
        arrayField {
            Nullable = true
        }
    }

    struct NestedEquatableStruct {
        Equatable = true
    }
}

define Defaults for typeCollection test.Equatable {
    struct EquatableNullableStruct {
        boolField {
            DefaultIsNull = true
        }
        intField {
            DefaultIsNull = true
        }
        uintField {
            DefaultIsNull = true
        }
        floatField {
            DefaultIsNull = true
        }
        stringField {
            DefaultIsNull = true
        }
        structField {
            DefaultIsNull = true
        }
        enumField {
            DefaultIsNull = true
        }
        mapField {
            DefaultIsNull = true
        }
        arrayField {
            DefaultIsNull = true
        }
    }
}

define GeniumExtensions for interface test.EquatableInterface {
    Equatable = true
    struct AnotherEquatableStruct {
        Equatable = true
    }

    method create {
        Constructor = true
    }

    method areEqual:localStruct {
        Static = true
    }

    method areEqual:foreignStruct {
        Static = true
    }

    method areEqual:foreignNullableStruct {
        Static = true
    }
}

define GeniumExtensions for interface test.PointerEquatableInterface {
    PointerEquatable = true

    method createNew {
        Static = true
    }

    method returnLast {
        Static = true
    }
}