#!/bin/bash
#
# Copyright (C) 2016-2018 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE


# Script to build the "hello" library for a C++ consumer. This is demonstrated
# by the base_api application.

USAGE=$(cat <<EOF
$0 [options]
    --publish             Build and publish Genium locally and use it for code generation
    --debug               Build with debug symbols
    --valgrind            Run with valgrind
    --junit               Generate junit xml test report
    --cpp <standard>      Build with C++<standard> standard, defaults to 11.
    --cmake <parameter>   Pass additional parameter to cmake
    --help                Print this message
EOF
)

SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
. "${SCRIPT_DIR}/inc.functions"

CMAKE_EXTRA_PARAMETERS=()
CPP_VERSION=11
while [[ $# -gt 0 ]]; do
    case "$1" in
        --publish)
            publish_local
            shift
            ;;
        --debug)
            CMAKE_EXTRA_PARAMETERS+=("-DCMAKE_BUILD_TYPE=RelWithDebInfo")
            shift
            ;;
        --valgrind)
            USE_VALGRIND=true
            shift
            ;;
        --junit)
            TEST_REPORTS=true
            shift
            ;;
        --cpp)
            CPP_VERSION="$2"
            shift 2
            ;;
        --cmake)
            CMAKE_EXTRA_PARAMETERS+=("$2")
            shift 2
            ;;
        --help|*)
            echo "$USAGE"
            exit 0
            ;;
    esac
done

GENIUM_VERSION="${GENIUM_VERSION:-+}"
BUILD_DIR=${PWD}/build-cpp
INSTALL_DIR=${PWD}/dist/cpp${CPP_VERSION}

[ -d ${BUILD_DIR} ] || mkdir -p ${BUILD_DIR}
[ -d ${INSTALL_DIR} ] || mkdir -p ${INSTALL_DIR}

# Chose platform-native CMake generator
if [ "$(cmake_generator)" ] ; then
    CMAKE_EXTRA_PARAMETERS+=("-G$(cmake_generator)")
fi

set -o pipefail

pushd ${BUILD_DIR}
safe cmake \
    -DBUILD_SHARED_LIBS=ON \
    -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} \
    -DCMAKE_VERBOSE_MAKEFILE=ON \
    -DHELLO_APIGEN_GENIUM_GENERATOR=cpp \
    -DHELLO_APIGEN_GENIUM_VERSION=${GENIUM_VERSION} \
    -DHELLO_BUILD_CPP_TESTS=ON \
    -DHELLO_TEST_CPP_VERSION=${CPP_VERSION} \
    "${CMAKE_EXTRA_PARAMETERS[@]}" \
    .. | tee cmake_output.log
popd

safe cmake \
    --build ${BUILD_DIR} \
    --target install

TEST_COMMAND="./test_cpp"

if [ "$USE_VALGRIND" = true ]; then
    REPORT_ARGS=""
    if [ "$TEST_REPORTS" = true ] ; then
        REPORT_ARGS="--xml=yes --xml-file=cpp_valgrind_report.xml"
    fi
    TEST_COMMAND="valgrind \
        --leak-check=full \
        --suppressions=${SCRIPT_DIR}/valgrind_suppressions \
        --gen-suppressions=all \
        $REPORT_ARGS \
        $TEST_COMMAND"
fi

pushd "${INSTALL_DIR}/bin"
    REPORT_ARGS=""
    if [ "$TEST_REPORTS" = true ] ; then
        REPORT_ARGS="--gtest_output=xml"
    fi
    exec $TEST_COMMAND $REPORT_ARGS
popd
