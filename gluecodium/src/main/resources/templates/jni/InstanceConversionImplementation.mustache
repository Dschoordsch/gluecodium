{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>java/CopyrightHeader}}

{{#includes}}
{{>common/Include}}
{{/includes}}
#include "ArrayConversionUtils.h"
#include "JniClassCache.h"

namespace
{
struct DummyNativeBaseType {};
}

{{#internalNamespace}}
namespace {{.}}
{
{{/internalNamespace}}
namespace jni
{

REGISTER_JNI_CLASS_CACHE("{{join internalPackages delimiter="/"}}/NativeBase", DummyNativeBaseType)

JniReference<jclass>& get_cached_native_base_class()
{
    return CachedJavaClass<DummyNativeBaseType>::java_class;
}

{{#models}}
{{#if hasTypeRepository}}
REGISTER_JNI_CLASS_CACHE_INHERITANCE("{{fullJavaName}}", "{{#cppNameSpaces}}{{.}}_{{/cppNameSpaces}}{{cppName}}", {{cppFullyQualifiedName}})
{{/if}}{{#unless hasTypeRepository}}
REGISTER_JNI_CLASS_CACHE("{{fullJavaName}}", {{cppFullyQualifiedName}})
{{/unless}}{{!!

}}{{#if isFunctionalInterface}}

{{cppFullyQualifiedName}}
convert_from_jni(JNIEnv* _env, const JniReference<jobject>& _jobj, {{cppFullyQualifiedName}}*)
{
    {{cppFullyQualifiedName}} _nresult{};
    auto& nativeBaseClass = get_cached_native_base_class();
    if (_env->IsInstanceOf(_jobj.get(), nativeBaseClass.get()))
    {
        if (_jobj != nullptr)
        {
            auto long_ptr = get_field_value(
                _env,
                _jobj,
                "nativeHandle",
                (int64_t*)nullptr);
            _nresult = *reinterpret_cast<{{cppFullyQualifiedName}}*>(long_ptr);
        }
    }
    else
    {
        createCppProxy(_env, _jobj, _nresult);
    }
    return _nresult;
}
{{/if}}

JniReference<jobject>
{{#if isFunctionalInterface}}
convert_to_jni(JNIEnv* _jenv, const {{cppFullyQualifiedName}}& _ninput)
{{/if}}{{#unless isFunctionalInterface}}
convert_to_jni(JNIEnv* _jenv, const ::std::shared_ptr<{{cppFullyQualifiedName}}> & _ninput)
{{/unless}}
{
    if ( !_ninput )
    {
        return {};
    }

{{#if isFunctionalInterface}}
    JniReference<jobject> jResult;
{{/if}}{{#unless isFunctionalInterface}}
    auto jResult = {{>common/InternalNamespace}}jni::CppProxyBase::getJavaObject( _ninput.get( ) );
    if ( jResult )
    {
        return jResult;
    }
{{/unless}}

{{#if hasTypeRepository}}
    const auto& id = {{>common/InternalNamespace}}get_type_repository(static_cast< {{cppFullyQualifiedName}}* >(nullptr)).get_id(_ninput.get());
    const auto& javaClass = CachedJavaClass<{{cppFullyQualifiedName}}>::get_java_class(id);
{{/if}}{{#unless hasTypeRepository}}
    auto &javaClass = CachedJavaClass<{{cppFullyQualifiedName}}>::java_class;
{{/unless}}
    auto pInstanceSharedPointer =
{{#unless isFunctionalInterface}}
        new (::std::nothrow) ::std::shared_ptr<{{cppFullyQualifiedName}}>( _ninput );
{{/unless}}{{#if isFunctionalInterface}}
        new (::std::nothrow) {{cppFullyQualifiedName}}(_ninput);
{{/if}}
    if ( pInstanceSharedPointer == nullptr )
    {
        auto exceptionClass = find_class(_jenv, "java/lang/OutOfMemoryError" );
        _jenv->ThrowNew( exceptionClass.get(), "Cannot allocate native memory." );
    }
    jResult = {{>common/InternalNamespace}}jni::create_instance_object(
        _jenv, javaClass, reinterpret_cast<jlong>( pInstanceSharedPointer ) );

    return jResult;
}

{{/models}}
}
{{#internalNamespace}}
}
{{/internalNamespace}}
