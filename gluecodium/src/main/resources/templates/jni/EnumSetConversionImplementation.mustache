{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>java/CopyrightHeader}}

{{#includes}}
{{>common/Include}}
{{/includes}}
#include "ArrayConversionUtils.h"
#include "EnumConversion.h"
#include "InstanceConversion.h"
#include "StructConversion.h"
#include "ProxyConversion.h"

{{#internalNamespace}}
namespace {{.}}
{
{{/internalNamespace}}
namespace jni
{
{{#models}}
JniReference<jobject>
convert_to_jni(JNIEnv* _env, const {{cppFullyQualifiedName}}& _ninput)
{
    auto enumSetClass = find_class(_env, "java/util/EnumSet");
    jmethodID noneOfMethodId = _env->GetStaticMethodID(
        enumSetClass.get(), "noneOf", "(Ljava/lang/Class;)Ljava/util/EnumSet;");
    auto elementClass = find_class(_env, "{{elementType.jniTypeSignature}}");
    auto result = make_local_ref(_env, _env->CallStaticObjectMethod(
        enumSetClass.get(), noneOfMethodId, elementClass.get()));

    jmethodID addMethodId = _env->GetMethodID(enumSetClass.get(), "add", "(Ljava/lang/Object;)Z");
    for (const {{cppFullyQualifiedName}}::value_type& element : _ninput)
    {
        auto jElement = convert_to_jni(_env, element);
        call_java_method<jboolean>(_env, result, addMethodId, jElement);
    }

    return result;
}
{{/models}}
}
{{#internalNamespace}}
}
{{/internalNamespace}}
