package smoke
class GenericTypesWithBasicTypes {
    typealias BasicList = List<String>
    typealias BasicMap = Map<String, String>
    typealias BasicSet = Set<String>
    struct StructWithGenerics {
        numbersList: List<UByte>
        numbersMap: Map<UByte, String>
        numbersSet: Set<UByte>
    }
    fun methodWithList(
        input: List<Int>
    ): List<Int>
    fun methodWithMap(
        input: Map<Int, Boolean>
    ): Map<Int, Boolean>
    fun methodWithSet(
        input: Set<Int>
    ): Set<Int>
    fun methodWithListTypeAlias(
        input: BasicList
    ): BasicList
    fun methodWithMapTypeAlias(
        input: BasicMap
    ): BasicMap
    fun methodWithSetTypeAlias(
        input: BasicSet
    ): BasicSet
    property listProperty: List<Float>
    property mapProperty: Map<Float, Double>
    property setProperty: Set<Float>
}
