plugins {
    id "org.xtext.xtend" version "1.0.15"
}

apply plugin: 'java'
apply plugin: 'org.xtext.xtend'

xtend {
    // generate xtend debug symbols
    debugger {
        sourceInstaller = 'SMAP'
        hideSyntheticVariables = true
    }
}

def fdeplOutput = "${buildDir}/fdepl-gen/"
// TODO move into generator
mkdir(buildDir)
mkdir(fdeplOutput)

configurations {
    buildDeployModel {
        extendsFrom compile
    }
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java', 'build/fdepl-gen'
        }
        resources {
            srcDirs "../fidl"
            include "**/*Spec.fdepl"
        }
    }
}

dependencies {
    compile 'org.eclipse.xtend:org.eclipse.xtend.lib:2.11.0.beta2' // this is a nice version of xtend, that handles nested classes well
    compile project(':externals:core')
    compile project(':externals:dsl')
    compile project(':externals:deploymodel')

    buildDeployModel project(':tools:fdeplgen')
}

// cannot have this as a gradle task, unless the tasks are moved into buildSrc.
// but as the depend on the whole franca external, this would build them twice,
// and it takes too long already
task buildDeployModel(type: JavaExec) {
    def fdeplFile = 'fidl/com/here/navigation/LegacySpec.fdepl'
    def output = fdeplOutput

    workingDir = ".."
    main = 'com.here.tools.FrancaDeploymodelGenerator'
    classpath = configurations.buildDeployModel
    inputs.file "${fdeplFile}"
    outputs.dir output
    outputs.upToDateSpec = new org.gradle.api.specs.AndSpec()
    args += fdeplFile
    args += output
}

generateXtext {
    dependsOn(buildDeployModel)
}
clean.dependsOn(cleanBuildDeployModel)

apply plugin: 'application'
mainClassName = 'com.here.ivi.api.Transpiler'
