{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{#includes}}
{{>common/Include}}
{{/includes}}

#include "JniClassCache.h"

{{#internalNamespace}}
namespace {{.}}
{
{{/internalNamespace}}
namespace jni
{
{{#enums}}
{{cppEnumName}}
convert_from_jni(JNIEnv* _jenv, const JniReference<jobject>& _jinput, {{cppEnumName}}* dummy)
{
    return {{cppEnumName}}(
        {{>common/InternalNamespace}}jni::get_field_value(_jenv, _jinput, "value", (int32_t*)nullptr));
}

{{>common/InternalNamespace}}optional<{{cppEnumName}}>
convert_from_jni(JNIEnv* _jenv, const JniReference<jobject>& _jinput, {{>common/InternalNamespace}}optional<{{cppEnumName}}>* dummy)
{
    return _jinput
        ? {{>common/InternalNamespace}}optional<{{cppEnumName}}>(convert_from_jni(_jenv, _jinput, ({{cppEnumName}}*)nullptr))
        : {{>common/InternalNamespace}}optional<{{cppEnumName}}>{};
}

REGISTER_JNI_CLASS_CACHE("{{>jni/JavaClassSignaturePrefix}}{{javaEnumName}}", {{cppEnumName}})

JniReference<jobject>
convert_to_jni(JNIEnv* _jenv, const {{cppEnumName}} _ninput)
{
    auto& javaClass = CachedJavaClass<{{cppEnumName}}>::java_class;
    const char* enumeratorName = nullptr;
    switch(_ninput) {
{{#enumerators}}
        case({{cppEnumName}}::{{cppName}}):
            enumeratorName = "{{javaName}}";
            break;
{{/enumerators}}
    }
    jfieldID fieldID = _jenv->GetStaticFieldID(javaClass.get(), enumeratorName, "L{{>jni/JavaClassSignaturePrefix}}{{javaEnumName}};");
    return make_local_ref(_jenv, _jenv->GetStaticObjectField(javaClass.get(), fieldID));
}

JniReference<jobject>
convert_to_jni(JNIEnv* _jenv, const {{>common/InternalNamespace}}optional<{{cppEnumName}}> _ninput)
{
    return _ninput ? convert_to_jni(_jenv, *_ninput) : JniReference<jobject>{};
}

{{/enums}}
}
{{#internalNamespace}}
}
{{/internalNamespace}}
