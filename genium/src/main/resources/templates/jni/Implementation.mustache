{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>java/CopyrightHeader}}

{{#container}}{{#includes}}
{{>common/Include}}
{{/includes}}
#include "InstanceConversion.h"
#include "StructConversion.h"
#include "ProxyConversion.h"
#include "EnumConversion.h"
#include "ArrayConversionUtils.h"
#include "JniReference.h"

extern "C" {

{{#methods}}
{{returnType.name}}
{{>jni/FunctionSignature}}

{
{{#parameters}}
{{#if type.isComplex}}
    {{type.cppName}} {{name}} = {{>common/InternalNamespace}}jni::convert_from_jni(_jenv,
            {{>common/InternalNamespace}}jni::make_non_releasing_ref(j{{name}}),
            ({{type.cppName}}*)nullptr);
{{/if}}
{{#unless type.isComplex}}
    {{type.cppName}} {{name}} = j{{name}};
{{/unless}}
{{/parameters}}
{{#unless isStatic}}{{#instanceOf container "JniContainer"}}
    auto pInstanceSharedPointer = {{#set jobjectName="_jinstance"}}{{>sharedInstance}}{{/set}}
{{/instanceOf}}{{!!
}}{{#notInstanceOf container "JniContainer"}}
    auto _ninstance = {{>common/InternalNamespace}}jni::convert_from_jni(_jenv,
        {{>common/InternalNamespace}}jni::make_non_releasing_ref(_jinstance),
        ({{container.cppFullyQualifiedName}}*)nullptr);
{{/notInstanceOf}}{{/unless}}
{{>jni/ReturnTypeConversion}}
}

{{/methods}}
{{#instanceOf container "JniContainer"}}
JNIEXPORT void JNICALL
Java_{{#javaPackages}}{{.}}_{{/javaPackages}}{{javaName}}_disposeNativeHandle(JNIEnv* _jenv, jobject _jinstance, jlong _jpointerRef)
{
    delete reinterpret_cast<std::shared_ptr<{{cppFullyQualifiedName}}>*> (_jpointerRef);
}
{{/instanceOf}}
{{#hasNativeEquatable}}
jboolean
{{#set javaMethodName="equals"}}{{>jni/FunctionSignaturePrefix}}{{/set}}, jobject jrhs)
{
{{#isPointerEquatable}}
    auto jclass = {{>common/InternalNamespace}}jni::get_object_class(_jenv, _jinstance);
{{/isPointerEquatable}}
{{#isEquatable}}
    auto& jclass = {{>common/InternalNamespace}}jni::get_cached_native_base_class();
{{/isEquatable}}
    if (!_jenv->IsInstanceOf(jrhs, jclass.get())) {
        return false;
    }
    auto lhs = {{#set jobjectName="_jinstance"}}{{>sharedInstance}}{{/set}}
{{#isPointerEquatable}}
    auto rhs = {{#set jobjectName="jrhs" cppFullyQualifiedName="void"}}{{>sharedInstance}}{{/set}}
    return *lhs == *rhs;
{{/isPointerEquatable}}
{{#isEquatable}}
    auto rhs = {{#set jobjectName="jrhs"}}{{>sharedInstance}}{{/set}}
    return **lhs == **rhs;
{{/isEquatable}}
}

jint
{{#set javaMethodName="hashCode"}}{{>jni/FunctionSignature}}{{/set}}
{
    auto pInstanceSharedPointer = {{#set jobjectName="_jinstance"}}{{>sharedInstance}}{{/set}}
{{#isPointerEquatable}}
    return reinterpret_cast<int64_t>(pInstanceSharedPointer->get());
{{/isPointerEquatable}}
{{#isEquatable}}
    return 7; //TODO APIGEN-1488 forward to C++ hash
{{/isEquatable}}
}
{{/hasNativeEquatable}}
}
{{/container}}
{{+sharedInstance}}{{!!
}}reinterpret_cast<std::shared_ptr<{{cppFullyQualifiedName}}>*> (
        {{>common/InternalNamespace}}jni::get_field_value(
            _jenv,
            {{>common/InternalNamespace}}jni::make_non_releasing_ref({{jobjectName}}),
            "nativeHandle",
            (int64_t*)nullptr));
{{/sharedInstance}}
