{{>java/CopyrightHeader}}

#pragma once

#include <jni.h>

#include "JniCppConversionUtils.h"
#include "JniReference.h"

#include <cstdint>
#include <memory>
#include <vector>


namespace {{.}}
{
namespace jni
{

// -------------------- JNI object field getters --------------------------------------------------

bool get_boolean_field(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName );

int8_t get_byte_field(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName );

int16_t get_short_field(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName );

int32_t get_int_field(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName );

int64_t get_long_field(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName );

float get_float_field(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName );

double get_double_field(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName );

std::string get_string_field(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName );

::std::shared_ptr< bool > get_nullable_boolean_field( JNIEnv* env,
                                                      const JniReference< jobject >& object,
                                                      const char* fieldName );

::std::shared_ptr< int8_t > get_nullable_byte_field( JNIEnv* env,
                                                     const JniReference< jobject >& object,
                                                     const char* fieldName );

::std::shared_ptr< int16_t > get_nullable_short_field( JNIEnv* env,
                                                       const JniReference< jobject >& object,
                                                       const char* fieldName );

::std::shared_ptr< int32_t > get_nullable_int_field( JNIEnv* env,
                                                     const JniReference< jobject >& object,
                                                     const char* fieldName );

::std::shared_ptr< int64_t > get_nullable_long_field( JNIEnv* env,
                                                      const JniReference< jobject >& object,
                                                      const char* fieldName );

::std::shared_ptr< float > get_nullable_float_field( JNIEnv* env,
                                                     const JniReference< jobject >& object,
                                                     const char* fieldName );

::std::shared_ptr< double > get_nullable_double_field( JNIEnv* env,
                                                       const JniReference< jobject >& object,
                                                       const char* fieldName );

::std::shared_ptr< ::std::string > get_nullable_string_field( JNIEnv* env,
                                                              const JniReference< jobject >& object,
                                                              const char* fieldName );

::std::shared_ptr< ::std::vector< uint8_t > > get_byte_array_field(
    JNIEnv* env, const JniReference< jobject >& object, const char* fieldName );

JniReference< jobject > get_object_field( JNIEnv* env,
                                       const JniReference<jobject>& object,
                                       const char* fieldName,
                                       const char* fieldSignature );

// -------------------- JNI object constructor ----------------------------------------------------

JniReference<jobject> create_object( JNIEnv* env, const JniReference<jclass>& javaClass );

// -------------------- JNI instance object constructor -------------------------------------------

JniReference<jobject> create_instance_object( JNIEnv* env, const JniReference<jclass>& javaClass, jlong instancePointer );

// -------------------- JNI object field setters --------------------------------------------------

void set_boolean_field(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, bool value );

void set_byte_field(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, int8_t value );

void set_short_field(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, int16_t value );

void set_int_field(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, int32_t value );

void set_long_field(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, int64_t value );

void set_float_field(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, float value );

void set_double_field(
    JNIEnv* env, const JniReference<jobject>& object, const char* fieldName, double value );

void set_string_field( JNIEnv* env,
                       const JniReference<jobject>& object,
                       const char* fieldName,
                       const std::string& fieldValue );

void set_nullable_boolean_field( JNIEnv* env,
                                 const JniReference< jobject >& object,
                                 const char* fieldName,
                                 ::std::shared_ptr< bool > value );

void set_nullable_byte_field( JNIEnv* env,
                              const JniReference< jobject >& object,
                              const char* fieldName,
                              ::std::shared_ptr< int8_t > value );

void set_nullable_short_field( JNIEnv* env,
                               const JniReference< jobject >& object,
                               const char* fieldName,
                               ::std::shared_ptr< int16_t > value );

void set_nullable_int_field( JNIEnv* env,
                             const JniReference< jobject >& object,
                             const char* fieldName,
                             ::std::shared_ptr< int32_t > value );

void set_nullable_long_field( JNIEnv* env,
                              const JniReference< jobject >& object,
                              const char* fieldName,
                              ::std::shared_ptr< int64_t > value );

void set_nullable_float_field( JNIEnv* env,
                               const JniReference< jobject >& object,
                               const char* fieldName,
                               ::std::shared_ptr< float > value );

void set_nullable_double_field( JNIEnv* env,
                                const JniReference< jobject >& object,
                                const char* fieldName,
                                ::std::shared_ptr< double > value );

void set_nullable_string_field( JNIEnv* env,
                                const JniReference< jobject >& object,
                                const char* fieldName,
                                ::std::shared_ptr< ::std::string > value );

void set_byte_array_field( JNIEnv* env,
                           const JniReference<jobject>& object,
                           const char* fieldName,
                           const std::shared_ptr< ::std::vector< uint8_t > >& fieldValue );

void set_object_field( JNIEnv* env,
                       const JniReference<jobject>& object,
                       const char* fieldName,
                       const char* fieldSignature,
                       const JniReference<jobject>& fieldValue );

}
}
