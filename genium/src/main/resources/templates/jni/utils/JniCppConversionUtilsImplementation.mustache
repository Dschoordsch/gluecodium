{{>java/CopyrightHeader}}

#include "JniCppConversionUtils.h"

namespace {{.}}
{
namespace jni
{

// ------------------- JNI to C++ conversion functions ---------------------------------------------

std::string
convert_from_jni( JNIEnv* env, const jobject jvalue, std::string* dummy )
{
    if ( env->IsSameObject( jvalue, nullptr ) )
    {
        return {};
    }
    jstring stringValue = static_cast< jstring >( jvalue );
    const char* jbuffer = env->GetStringUTFChars( stringValue, nullptr );
    auto nresult = std::string( jbuffer );
    env->ReleaseStringUTFChars( stringValue, jbuffer );
    return nresult;
}

std::shared_ptr< std::vector< uint8_t > >
convert_from_jni( JNIEnv* env, const jbyteArray& jvalue,
                  std::shared_ptr< std::vector< uint8_t > >* dummy )
{
    if ( env->IsSameObject( jvalue, nullptr ) )
    {
        return {};
    }
    size_t size = static_cast< size_t >( env->GetArrayLength( jvalue ) );
    auto nresult = std::make_shared< std::vector< uint8_t > >( size );
    jbyte* jbuffer = reinterpret_cast< jbyte* >( nresult->data( ) );
    env->GetByteArrayRegion( jvalue, 0, size, jbuffer );
    return nresult;
}

// -------------------- C++ to JNI conversion functions --------------------------------------------

jstring
convert_to_jni( JNIEnv* env, const std::string& nvalue )
{
    return env->NewStringUTF( nvalue.c_str( ) );
}

jbyteArray
convert_to_jni( JNIEnv* env, const std::shared_ptr< std::vector< uint8_t > >& nvalue )
{
    if ( !nvalue )
    {
        return nullptr;
    }

    jsize size = static_cast< jsize >( nvalue->size( ) );
    jbyteArray jresult = env->NewByteArray( size );
    const jbyte* jbuffer = reinterpret_cast< const jbyte* >( nvalue->data( ) );
    env->SetByteArrayRegion( jresult, 0, size, jbuffer );

    return jresult;
}

}
}
