#pragma once

#include <jni.h>
#include "JniReference.h"
{{#includes}}
{{>common/Include}}
{{/includes}}

#include "ProxyConversion.h"

namespace {{internalNamespace}} {
namespace jni {
template < typename T >
::std::shared_ptr< T >
convert_from_jni( JNIEnv* _env, const JniReference<jobject>& _jobj, ::std::shared_ptr< T >* dummy ) {
    ::std::shared_ptr< T > _nresult{};
    auto nativeBaseClass = find_class(_env, "{{join basePackages delimiter="/"}}/NativeBase");
    if (_env->IsInstanceOf(_jobj.get(), nativeBaseClass.get())) {
        if (_jobj != nullptr) {
            auto long_ptr = {{internalNamespace}}::jni::get_long_field(_env, get_object_class(_env, _jobj), _jobj, "nativeHandle");
            _nresult = *reinterpret_cast<::std::shared_ptr< T >*> (long_ptr);
        }
    } else {
        ::createCppProxy<>( _env, _jobj, _nresult);
    }
    return _nresult;
}

{{#models}}
{{>jni/CppToJniInstanceConversionSignature}};

{{/models}}

}
}
