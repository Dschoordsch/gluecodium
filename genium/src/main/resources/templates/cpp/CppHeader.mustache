{{!!
  !
  ! Copyright (C) 2016-2019 HERE Europe B.V.
  !
  ! Licensed under the Apache License, Version 2.0 (the "License");
  ! you may not use this file except in compliance with the License.
  ! You may obtain a copy of the License at
  !
  !     http://www.apache.org/licenses/LICENSE-2.0
  !
  ! Unless required by applicable law or agreed to in writing, software
  ! distributed under the License is distributed on an "AS IS" BASIS,
  ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ! See the License for the specific language governing permissions and
  ! limitations under the License.
  !
  ! SPDX-License-Identifier: Apache-2.0
  ! License-Filename: LICENSE
  !
  !}}
{{>cpp/CppCommentHeader}}

#pragma once

{{#if includes}}
{{#includes}}
{{>common/Include}}
{{/includes}}

{{/if}}
{{#if forwardDeclarations}}
{{#forwardDeclarations}}
{{>forwardDeclarationGroup}}
{{/forwardDeclarations}}

{{/if}}
{{#namespace}}
namespace {{.}} {

{{/namespace}}
{{#if members}}
{{#sortedMembers}}
{{#instanceOf this "CppEnum"}}{{>cpp/CppEnum}}{{/instanceOf}}
{{#instanceOf this "CppConstant"}}{{#set storageQualifier="extern"}}{{>cpp/CppConstant}}{{/set}}{{/instanceOf}}
{{#instanceOf this "CppUsing"}}{{>cpp/CppUsing}}{{/instanceOf}}
{{#instanceOf this "CppStruct"}}
{{>cpp/DocComment}}
{{>cpp/CppStruct}}
{{/instanceOf}}
{{/sortedMembers}}
{{#classes}}
{{>cpp/CppClass}}
{{/classes}}

{{/if}}

{{#errorEnums}}
{{>cpp/CppExportMacro}}::std::error_code make_error_code( {{fullyQualifiedName}} value ) noexcept;
{{/errorEnums}}
{{#namespace}}
}
{{/namespace}}

{{#if errorEnums}}

namespace std
{
{{#errorEnums}}
template <>
struct is_error_code_enum< {{fullyQualifiedName}} > : public std::true_type { };
{{/errorEnums}}
}
{{/if}}
{{#if equatables}}
{{#internalNamespace}}
namespace {{.}} {
{{/internalNamespace}}
{{#equatables}}
template<>
struct hash< {{fullyQualifiedName}} > {
    std::size_t operator( )( const {{fullyQualifiedName}}& t ) const;
};
{{#instanceOf this "CppClass"}}
template <>
struct EqualityHash< std::shared_ptr< {{fullyQualifiedName}} > >
{
    std::size_t operator( )( const std::shared_ptr< {{fullyQualifiedName}} >& t ) const;
};
{{/instanceOf}}
{{/equatables}}
{{#internalNamespace}}
}
{{/internalNamespace}}
{{/if}}

{{#if typeRegisteredClasses}}
{{#internalNamespace}}
namespace {{.}} {
{{/internalNamespace}}
{{#typeRegisteredClasses}}
{{>cpp/CppExportMacro}}TypeRepository& get_type_repository(const ::{{#namespace}}{{.}}::{{/namespace}}{{name}}*);
{{/typeRegisteredClasses}}
{{#internalNamespace}}
}
{{/internalNamespace}}
{{/if}}{{!!

}}{{+forwardDeclarationGroup}}
namespace {{namespace}} {
{{#types}}
    class {{.}};
{{/types}}
{{#subGroups}}
{{>forwardDeclarationGroup}}
{{/subGroups}}
}
{{/forwardDeclarationGroup}}
