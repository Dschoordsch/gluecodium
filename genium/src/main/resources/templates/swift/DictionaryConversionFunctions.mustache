func convert{{name}}ToCType(_ swiftDict: {{publicName}}) -> _baseRef {
    let c_handle = {{cPrefix}}_create_handle()
    for (swift_key, swift_value) in swiftDict {
{{#set variableName="key" variableType=keyType}}{{prefixPartial "ConvertFromSwift" "        "}}{{/set}}
{{#set variableName="value" variableType=valueType}}{{prefixPartial "ConvertFromSwift" "        "}}{{/set}}
        {{cPrefix}}_put(c_handle, c_key, c_value)
    }
    return c_handle
}

{{+ConvertFromSwift}}{{!!
}}{{#switch variableType.category.toString}}{{!!
    }}{{#case "BUILTIN_STRING"}}{{>ConvertFromSwiftString}}{{/case}}{{!!
    }}{{#case "STRUCT"}}{{>ConvertFromSwiftStruct}}{{/case}}{{!!
    }}{{#case "DICTIONARY"}}{{>ConvertFromSwiftDictionary}}{{/case}}{{!!
    }}{{#case "ENUM"}}{{>ConvertFromSwiftEnum}}{{/case}}{{!!
    }}{{#case "CLASS"}}{{>ConvertFromSwiftClass}}{{/case}}{{!!
    }}{{#case "ARRAY"}}{{>ConvertFromSwiftArray}}{{/case}}{{!!
    }}{{#default}}let c_{{variableName}} = swift_{{variableName}}
{{/default}}{{!!
}}{{/switch}}{{!!
}}{{/ConvertFromSwift}}{{!!

}}{{+ConvertFromSwiftString}}{{!!
}}let c_{{variableName}} = swift_{{variableName}}.convertToCType()
defer {
    std_string_release_handle(c_{{variableName}})
}
{{/ConvertFromSwiftString}}{{!!

}}{{+ConvertFromSwiftStruct}}{{!!
}}let c_{{variableName}} = swift_{{variableName}}.convertToCType()
defer {
    {{variableType.cPrefix}}_release_handle(c_{{variableName}})
}
{{/ConvertFromSwiftStruct}}{{!!

}}{{+ConvertFromSwiftDictionary}}{{!!
}}let c_{{variableName}} = convert{{variableType.name}}ToCType(swift_{{variableName}})
defer {
    {{variableType.cPrefix}}_release_handle(c_{{variableName}})
}
{{/ConvertFromSwiftDictionary}}{{!!

}}{{+ConvertFromSwiftEnum}}{{!!
}}let c_{{variableName}} = swift_{{variableName}}.rawValue
{{/ConvertFromSwiftEnum}}{{!!

}}{{+ConvertFromSwiftClass}}{{!!
}}let {{variableName}}_ref_holder = getRef(swift_{{variableName}})
let c_{{variableName}} = {{variableName}}_ref_holder.ref
{{/ConvertFromSwiftClass}}{{!!

}}{{+ConvertFromSwiftArray}}{{!!
}}let c_conversion = swift_{{variableName}}.c_conversion()
defer {
    c_conversion.cleanup()
}
let c_{{variableName}} = c_conversion.c_type
{{/ConvertFromSwiftArray}}
