//
{{#if copyrightHeader}}{{prefix copyrightHeader "// "}}{{/if}}
//
// Automatically generated. Do not modify. Your changes will be lost.
import Foundation

{{#arrays}}
internal class {{implementingClass}}: CollectionOf<{{underlyingType.publicName}}> {
    var c_element: _baseRef?

    init(_ c_element: _baseRef) {
        self.c_element = c_element
        super.init()
        self.startIndex = 0
        self.endIndex = Int({{refName}}_count(c_element))
    }

    deinit {
        {{refName}}_release_handle(c_element!)
    }

    public override subscript(index: Int) -> {{underlyingType.publicName}} {
        let handle = {{refName}}_get(c_element!, UInt64(index))
        return {{underlyingType.className}}copyFromCType(handle)
    }

    // This constructor is never called but it's required to conform to ExpressibleByArrayLiteral
    required public init(arrayLiteral elements: Element...) {
        super.init(elements)
    }
}


internal func copyFromCType(_ handle: _baseRef) -> CollectionOf<{{underlyingType.publicName}}> {
    return {{implementingClass}}(handle)
}

{{!! Array is taking over and owning _baseRef instead of releasing it directly }}
internal func moveFromCType(_ handle: _baseRef) -> CollectionOf<{{underlyingType.publicName}}> {
    return copyFromCType(handle)
}

internal func copyToCType<T: Collection>(_ swiftArray: T) -> RefHolder {{>GenericConstraintsRule}} {
    let handle = {{refName}}_create_handle()

    for item in swiftArray {
        let c_item = moveToCType(item)
        {{refName}}_append(handle, c_item.ref)
    }
    return RefHolder(handle)
}

internal func moveToCType<T: Collection>(_ swiftArray: T) -> RefHolder {{>GenericConstraintsRule}} {
    return RefHolder(ref: copyToCType(swiftArray).ref, release: {{refName}}_release_handle)
}

{{/arrays}}

{{+GenericConstraintsRule}}{{!!
 }}where {{#genericParameter.constraints}}T.{{name}}{{!!
 }}{{#if isProtocol}}:{{/if}}{{#unless isProtocol}} =={{/unless}} {{typeName}}{{!!
 }}{{#if iter.hasNext}}, {{/if}}{{/genericParameter.constraints}}{{/GenericConstraintsRule}}
