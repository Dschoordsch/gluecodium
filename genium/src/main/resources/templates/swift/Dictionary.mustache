{{#dictionaries}}
internal func copyFromCType(_ handle: _baseRef) -> {{implementingClass}} {
    var swiftDict: {{implementingClass}} = [:]
    let iterator_handle = {{cPrefix}}_iterator(handle)
    while {{cPrefix}}_iterator_is_valid(handle, iterator_handle) {

        swiftDict[{{keyType.className}}moveFromCType({{cPrefix}}_iterator_key(iterator_handle))] =
            {{valueType.className}}moveFromCType({{cPrefix}}_iterator_value(iterator_handle)) as {{valueType.publicName}}
        {{cPrefix}}_iterator_increment(iterator_handle)
    }
    {{cPrefix}}_iterator_release_handle(iterator_handle)
    return swiftDict
}

internal func moveFromCType(_ handle: _baseRef) -> {{implementingClass}} {
    defer {
        {{cPrefix}}_release_handle(handle)
    }
    return copyFromCType(handle)
}

internal func copyToCType(_ swiftDict: {{implementingClass}}) -> RefHolder {
    let c_handle = {{cPrefix}}_create_handle()
    for (key, value) in swiftDict {
        let c_key = moveToCType(key)
        let c_value = moveToCType(value)
        {{cPrefix}}_put(c_handle, c_key.ref, c_value.ref)
    }
    return RefHolder(c_handle)
}

internal func moveToCType(_ swiftDict: {{implementingClass}}) -> RefHolder {
    return RefHolder(ref: copyToCType(swiftDict).ref, release: {{cPrefix}}_release_handle)
}
{{!!
Optionals
}}
internal func copyFromCType(_ handle: _baseRef) -> {{implementingClass}}? {
    guard handle != 0 else {
        return nil
    }
    let unwrappedHandle = {{cPrefix}}_unwrap_optional_handle(handle)
    return copyFromCType(unwrappedHandle) as {{implementingClass}}
}

internal func moveFromCType(_ handle: _baseRef) -> {{implementingClass}}? {
    defer {
        {{cPrefix}}_release_optional_handle(handle)
    }
    return copyFromCType(handle)
}

internal func copyToCType(_ swiftDict: {{implementingClass}}?) -> RefHolder {
    guard let swiftDict = swiftDict else {
        return RefHolder(0)
    }
    let optionalHandle = {{cPrefix}}_create_optional_handle()
    let handle = {{cPrefix}}_unwrap_optional_handle(optionalHandle)
    for (key, value) in swiftDict {
        let c_key = moveToCType(key)
        let c_value = moveToCType(value)
        {{cPrefix}}_put(handle, c_key.ref, c_value.ref)
    }
    return RefHolder(optionalHandle)
}

internal func moveToCType(_ swiftType: {{implementingClass}}?) -> RefHolder {
    return RefHolder(ref: copyToCType(swiftType).ref, release: {{cPrefix}}_release_optional_handle)
}

{{/dictionaries}}
