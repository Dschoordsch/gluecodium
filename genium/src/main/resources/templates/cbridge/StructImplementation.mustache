_baseRef {{name}}_create_handle({{#fields}}{{type.cType}} {{name}}{{#if iter.hasNext}}, {{/if}}{{/fields}}) {
{{#unless isImmutable}}    {{baseApiName}}* _struct = new {{baseApiName}}();{{/unless}}
{{#fields}}
{{#if isImmutable}}    auto _{{name}} = {{/if}}{{!!
}}{{#unless isImmutable}}    _struct->{{#if baseLayerSetterName}}{{baseLayerSetterName}}({{/if}}{{!!
}}{{#unless baseLayerSetterName}}{{baseLayerName}} = {{/unless}}{{/unless}}{{!!
}}{{#switch type.typeCategory.toString}}{{!!
    }}{{#case "BUILTIN_SIMPLE"}}{{name}}{{/case}}{{!!
    }}{{#case "ENUM"}}static_cast<{{type.name}}>({{name}}){{/case}}{{!!
    }}{{#default}}Conversion<{{type}}>::toCpp({{name}}){{/default}}{{!!
}}{{/switch}}{{#if baseLayerSetterName}}){{/if}};
{{/fields}}
{{#if isImmutable}}    {{baseApiName}}* _struct = new {{baseApiName}}({{#fields}}_{{name}}{{#if iter.hasNext}}, {{/if}}{{/fields}});{{/if}}
    return reinterpret_cast<_baseRef>(_struct);
}

void {{name}}_release_handle(_baseRef handle) {
    delete get_pointer<{{mappedType.name}}>(handle);
}

{{#set structname=name}}
{{#fields}}
{{type.functionReturnType}} {{structname}}_{{name}}_get(_baseRef handle) {
    auto struct_pointer = get_pointer<{{mappedType.name}}>(handle);
{{#switch type.typeCategory.toString}}{{!!
    }}{{#case "BUILTIN_SIMPLE"}}return {{>getBaseLayerFieldValue}};{{/case}}{{!!
    }}{{#case "ENUM"}}return static_cast<{{type.functionReturnType}}>({{>getBaseLayerFieldValue}});{{/case}}{{!!
    }}{{#default}}return Conversion<{{type}}>::toBaseRef({{>getBaseLayerFieldValue}});{{/default}}
{{/switch}}
}
{{/fields}}
{{/set}}{{!!

}}{{+getBaseLayerFieldValue}}struct_pointer->{{#if baseLayerGetterName}}{{baseLayerGetterName}}(){{/if}}{{!!
}}{{#unless baseLayerGetterName}}{{baseLayerName}}{{/unless}}{{/getBaseLayerFieldValue}}
