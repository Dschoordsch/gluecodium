package smoke

class Nullable {
    typealias SomeArray = List<String>
    typealias SomeMap = Map<Long, String>

    enum SomeEnum {
        ON,
        OFF
    }

    struct SomeStruct {
        stringField: String
    }
    struct NullableStruct {
        stringField: String?
        boolField: Boolean?
        doubleField: Double?
        structField: SomeStruct?
        enumField: SomeEnum?
        arrayField: SomeArray?
        inlineArrayField: List<String>?
        mapField: SomeMap?
        instanceField: SomeInterface?
    }
    struct NullableIntsStruct {
        int8Field: Byte?
        int16Field: Short?
        int32Field: Int?
        int64Field: Long?
        uint8Field: UByte?
        uint16Field: UShort?
        uint32Field: UInt?
        uint64Field: ULong?
    }

    fun methodWithString(
        input: String?
    ): String?
    fun methodWithBoolean(
        input: Boolean?
    ): Boolean?
    fun methodWithDouble(
        input: Double?
    ): Double?
    fun methodWithInt(
        input: Long?
    ): Long?
    fun methodWithSomeStruct(
        input: SomeStruct?
    ): SomeStruct?
    fun methodWithSomeEnum(
        input: SomeEnum?
    ): SomeEnum?
    fun methodWithSomeArray(
        input: SomeArray?
    ): SomeArray?
    fun methodWithInlineArray(
        input: List<String>?
    ): List<String>?
    fun methodWithSomeMap(
        input: SomeMap?
    ): SomeMap?
    fun methodWithInstance(
        input: SomeInterface?
    ): SomeInterface?

    property stringAttribute: String? {
        get
        set
    }
    property boolAttribute: Boolean? {
        get
        set
    }
    property doubleAttribute: Double? {
        get
        set
    }
    property intAttribute: Long? {
        get
        set
    }
    property structAttribute: SomeStruct? {
        get
        set
    }
    property enumAttribute: SomeEnum? {
        get
        set
    }
    property arrayAttribute: SomeArray? {
        get
        set
    }
    property inlineArrayAttribute: List<String>? {
        get
        set
    }
    property mapAttribute: SomeMap? {
        get
        set
    }
    property instanceAttribute: SomeInterface? {
        get
        set
    }
}
