# Copyright (C) 2016-2019 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package smoke

class StaticMethods {
    static fun returnInvertedBoolean(input: Boolean): Boolean
    static fun returnAndBoolean(
        input1: Boolean,
        input2: Boolean
    ): Boolean
    static fun returnInputByteBuffer(inputBuffer: Blob): Blob
    static fun returnReverseByteBuffer(inputBuffer: Blob): Blob
    static fun concatenateByteBuffers(
        input1: Blob,
        input2: Blob
    ): Blob
    static fun returnFloat(inputNumber: Float): Float
    static fun returnIncrementedFloat(inputNumber: Float): Float
    static fun sumTwoFloats(
        inputNumber1: Float,
        inputNumber2: Float
    ): Float
    static fun returnDouble(inputNumber: Double): Double
    static fun returnIncrementedDouble(inputNumber: Double): Double
    static fun sumTwoDoubles(
        inputNumber1: Double,
        inputNumber2: Double
    ): Double
    static fun returnNextNumberINT8(inputNumber: Byte): Byte
    static fun sumTwoNumbersINT8(
        inputNumber1: Byte,
        inputNumber2: Byte
    ): Byte
    static fun returnPrimeINT8(): Byte
    static fun returnNextNumberUINT8(inputNumber: UByte): UByte
    static fun sumTwoNumbersUINT8(
        inputNumber1: UByte,
        inputNumber2: UByte
    ): UByte
    static fun returnPrimeUINT8(): UByte
    static fun returnNextNumberINT16(inputNumber: Short): Short
    static fun sumTwoNumbersINT16(
        inputNumber1: Short,
        inputNumber2: Short
    ): Short
    static fun returnPrimeINT16(): Short
    static fun returnNextNumberUINT16(inputNumber: UShort): UShort
    static fun sumTwoNumbersUINT16(
        inputNumber1: UShort,
        inputNumber2: UShort
    ): UShort
    static fun returnPrimeUINT16(): UShort
    static fun returnNextNumberINT32(inputNumber: Int): Int
    static fun sumTwoNumbersINT32(
        inputNumber1: Int,
        inputNumber2: Int
    ): Int
    static fun returnPrimeINT32(): Int
    static fun returnNextNumberUINT32(inputNumber: UInt): UInt
    static fun sumTwoNumbersUINT32(
        inputNumber1: UInt,
        inputNumber2: UInt
    ): UInt
    static fun returnPrimeUINT32(): UInt
    static fun returnNextNumberINT64(inputNumber: Long): Long
    static fun sumTwoNumbersINT64(
        inputNumber1: Long,
        inputNumber2: Long
    ): Long
    static fun returnPrimeINT64(): Long
    static fun returnNextNumberUINT64(inputNumber: ULong): ULong
    static fun sumTwoNumbersUINT64(
        inputNumber1: ULong,
        inputNumber2: ULong
    ): ULong
    static fun returnPrimeUINT64(): ULong
    static fun returnInputString(inputString: String): String
    static fun concatenateStrings(
        inputString1: String,
        inputString2: String
    ): String
    static fun returnHelloString(): String
    static fun returnEmpty(): String
}

class Constructors {
    enum ErrorEnum {
        NONE,
        CRASHED
    }

    constructor create()
    constructor create(other: Constructors)
    constructor create(
        foo: String,
        bar: ULong
    )
    constructor create(input: String) throws ErrorEnumException
    constructor create(input: List<Double>)

    exception ErrorEnumException(ErrorEnum)
}

class ChildConstructors : Constructors {
    @Java(Name = "createNoArgsChild")
    constructor create()
    @Java(Name = "createCopyFromParent")
    constructor create(other: Constructors)
}
