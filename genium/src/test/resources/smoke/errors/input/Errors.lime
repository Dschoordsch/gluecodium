# Copyright (C) 2016-2019 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

package smoke

class Errors {
    enum InternalError {
        ERROR_NONE,
        ERROR_FATAL
    }
    @Cpp(ExternalType = "foo/Bar.h", ExternalName = "::fire::SomeEnum")
    enum ExternalErrors {
        NONE,
        BOOM,
        BUST
    }

    static fun methodWithErrors() throws InternalErrorException
    static fun methodWithExternalErrors() throws ExternalErrorsException
    static fun methodWithErrorsAndReturnValue(): String throws InternalErrorException
    static fun methodWithAliasedError() throws BOOM

    exception InternalErrorException(InternalError)
    exception ExternalErrorsException(ExternalErrors)

    typealias BOOM = InternalErrorException
}

interface ErrorsInterface {
    enum InternalError {
        ERROR_NONE,
        ERROR_FATAL
    }
    enum ExternalErrors {
        NONE,
        BOOM,
        BUST
    }

    fun methodWithErrors() throws InternalErrorException
    fun methodWithExternalErrors() throws ExternalErrorsException
    fun methodWithErrorsAndReturnValue(): String throws InternalErrorException

    exception InternalErrorException(InternalError)
    exception ExternalErrorsException(ExternalErrors)
}

types SomeTypeCollection {
    enum SomeTypeCollectionError {
        ERROR_A,
        ERROR_B
    }
    exception SomeTypeCollectionErrorException(SomeTypeCollectionError)
}
