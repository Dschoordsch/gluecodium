/*
 * Copyright (C) 2016-2019 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package smoke

<** @description: This is some very useful interface. **>
interface comments {

    <** @description: This is some very useful method that measures the usefulness of its input. **>
    method someMethodWithAllComments {
        in {
            <** @description: Very useful input parameter **>
            String input
        }
        out {
            <** @description: Usefulness of the input **>
            Usefulness output
        }
        error SomeEnum
    }

    <** @description: This is some very useful method that measures the usefulness of its input. **>
    method someMethodWithInputComments {
        in {
            <** @description: Very useful input parameter **>
            String input
        }
        out {
            Usefulness output
        }
    }

    <** @description: This is some very useful method that measures the usefulness of its input. **>
    method someMethodWithOutputComments {
        in {
            String input
        }
        out {
            <** @description: Usefulness of the input **>
            Usefulness output
        }
    }

    <** @description: This is some very useful method that measures the usefulness of its input. **>
    method someMethodWithNoComments {
        in {
            String input
        }
        out {
            Usefulness output
        }
    }

    <** @description:
    This is some very useful method that does not measure the usefulness of its input.
    **>
    method someMethodWithoutReturnTypeWithAllComments {
        in {
            <** @description: Very useful input parameter **>
            String input
        }
    }

    <** @description:
    This is some very useful method that does not measure the usefulness of its input.
    **>
    method someMethodWithoutReturnTypeWithNoComments {
        in {
            String input
        }
    }

    <** @description: This is some very useful method that measures the usefulness of something. **>
    method someMethodWithoutInputParametersWithAllComments {
        out {
            <** @description: Usefulness of the input **>
            Usefulness output
        }
    }

    <** @description: This is some very useful method that measures the usefulness of something. **>
    method someMethodWithoutInputParametersWithNoComments {
        out {
            Usefulness output
        }
    }

    method someMethodWithNothing {
    }

    <** @description: This is some very useful method that does nothing. **>
    method someMethodWithoutReturnTypeOrInputParameters {
    }

    <** @description: This is some very useful constant. **>
    const Usefulness VeryUseful = true


    <** @description: This is some very useful struct. **>
    struct SomeStruct {
        <** @description: How useful this struct is **>
        Usefulness someField
        <** @description: Can be `null` **>
        String nullableField
    }

    <** @description: This is some very useful typedef. **>
    typedef Usefulness is Boolean

    <** @description: This is some very useful array. **>
    array SomeArray of String

    <** @description: This is some very useful map. **>
    map SomeMap { String to Usefulness }

    <** @description: This is some very useful enum. **>
    public enumeration SomeEnum {
        <** @description: Not quite useful **>
        Useless
        <** @description: Somewhat useful **>
        Useful
    }

    <** @description: Some very useful attribute. **>
    attribute Usefulness SomeAttribute

    <** @description: This is some very useful instance method. **>
    method instanceMethod {
        in {
            <** @description: This is some very useful instance method parameter. **>
            CommentsInstantiable.CommentsInstantiable input
        }
        out {
            <** @description: This is some very useful instance method result. **>
            CommentsInstantiable.CommentsInstantiable output
        }
    }

    method oneParameterCommentOnly {
        in {
            String undocumented
            <** @description: nicely documented **>
            String documented
        }
        out {
            String alsoUndocumented
        }
    }

    method returnCommentOnly {
        in {
            String undocumented
        }
        out {
            <** @description: nicely documented **>
            String documented
        }
    }

    <** @description: Some very useful attribute. **>
    attribute CommentsInstantiable.CommentsInstantiable instanceAttribute
}

<** @description: This is some very useful interface.
    There is a lot to say about this interface.
    at least it has multiline comments.

    I am a heading
    --------------

    And now comes a list:
    \* asterisk
    \* needs
    \* escaping

    ```Some example code;```

**>
interface MultiLineComments {
   <** @description: This is very important method.
       It has very important parameters.
       It has side effects.
   **>
   method someMethodWithLongComment {
       in {
          <** @description: Very useful input parameter.
              You must not confuse it with the second parameter.
              But they are similar.
          **>
          String input

          <** @description: Not as useful as the first parameter.
              But still useful.
              use a positive value for more happiness.
          **>
          Double ratio
       }
       out {
          <** @description: If you provide a useful input,
              and a useful ratio you can expect a useful output.
              Just kidding do not expect anything from a method until
              you see its body.
          **>
          Float output
       }
   }
}

<** @description: This is some very useful interface. There is a lot to say about this interface. at least it has a long comment. **>
interface LongComments {
   <** @description: This is very important method. It has very important parameters. It has side effects. **>
   method someMethodWithLongComment {
       in {
          <** @description: Very useful input parameter. You must not confuse it with the second parameter. But they are similar.
          **>
          String input

          <** @description: Not as useful as the first parameter. But still useful. use a positive value for more happiness. **>
          Double ratio
       }
       out {
          <** @description: If you provide a useful input and a useful ratio you can expect a useful output. Just kidding do not expect anything from a method until you see its body. **>
          Float output
       }
   }
}

interface CommentsInstantiable {
    public typedef CommentsInstantiable is undefined

    <** @description: This is some very useful constructor. **>
    method create {
        in {
            <** @description: Very useful input parameter **>
            String input
        }
        out {
            <** @description: Very useful result **>
            Boolean dummy
        }
    }
}

typeCollection CommentsTypeCollection {
    const Boolean TypeCollectionConstant = true
    struct TypeCollectionStruct {
        Int32 field
    }
    typedef TypeCollectionTypedef is Boolean

    enumeration TypeCollectionEnum{
        item
    }
}

<** @description: The nested types like [random_method] don't need full name prefix, but it's
possible to references other interfaces like [smoke.CommentsInterface] or other members
[comments.someMethodWithAllComments].

Weblinks are not modified like this [example] or [www.example.com].

[example]: http://example.com
**>
interface CommentsLinks {
    public typedef CommentsLinks is undefined

    enumeration TooUseful {
        Twice,
        ThreeTimes
    }

    <** @description:

    Link types:
    \* constant: [comments.VeryUseful]
    \* struct: [comments.SomeStruct]
    \* struct field: [comments.SomeStruct.someField]
    \* enum: [comments.SomeEnum]
    \* enum item: [comments.SomeEnum.Useful]
    \* attribute: [comments.SomeAttribute]
    \* attribute setter: [comments.SomeAttribute.set]
    \* attribute getter: [comments.SomeAttribute.get]
    \* method: [comments.instanceMethod]
    \* top level constant: [CommentsTypeCollection.TypeCollectionConstant]
    \* top level struct: [CommentsTypeCollection.TypeCollectionStruct]
    \* top level struct field: [CommentsTypeCollection.TypeCollectionStruct.field]
    \* top level enum: [CommentsTypeCollection.TypeCollectionEnum]
    \* top level enum item: [CommentsTypeCollection.TypeCollectionEnum.item]


    Not working for Java:
    \* typedef: [comments.Usefulness]
    \* array: [comments.SomeArray]
    \* map: [comments.SomeMap]
    \* top level typedef: [CommentsTypeCollection.TypeCollectionTypedef]

    Not working for Swift:
    \* named comment: [Alternative name for the link, stripped for Swift][comments.VeryUseful]

    Not working:
    \* error: [TooUsefulException]
    \* input parameter: [inputParameter]
    \* output parameter: [outputParameter]

    **>
    method random_method{
        in {
            comments.SomeEnum inputParameter
        }
        out {
            comments.SomeEnum outputParameter
        }
        error TooUseful
    }
}
