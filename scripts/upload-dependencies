#!/bin/bash -e
#
# Copyright (C) 2016-2019 HERE Europe B.V.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE
#
# Upload Genium dependencies to HERE Artifactory.
#

function usage {
  cat <<EOF
Publish information is read from gradle.properties file in the project
root or ~/.gradle/. The file must have Artifactory url, repository and
required credentials with publishing rights. For example

  artifactory.username=username
  artifactory.password=password
  artifactory.contextUrl=https://artifactory.example.com/artifactory
  artifactory.repoKey=gradle-plugins-release-local
EOF
}

SCRIPT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
. "${SCRIPT_DIR}/inc.functions"

GRADLE_PROPERTIES="$HOME/.gradle/gradle.properties"
[ -f "$GRADLE_PROPERTIES" ] || GRADLE_PROPERTIES="${SCRIPT_DIR}/../gradle.properties"
[ -f "$GRADLE_PROPERTIES" ] || die "Could not find gradle.properties"

while IFS='=' read -r key value
do
  if [[ $key == artifactory* ]]; then
    key=$(echo $key | tr '.' '_')
    eval ${key}=\${value}
  fi
done < "$GRADLE_PROPERTIES"

if [ -z "$artifactory_contextUrl" -o -z "$artifactory_repoKey" -o -z "$artifactory_username" -o -z "$artifactory_password" ]; then
  usage
  exit 1
fi

credentials="${artifactory_username}:${artifactory_password}"

upload_to_artifactory () {

  local input_file="$1"
  local destination="$artifactory_contextUrl/$artifactory_repoKey/$1"

  # Checksum upload to test if the artifact is already present
  sha1=$(openssl sha1 "$input_file" | cut -d" " -f2)  # We have no sha1sum on Mac OS
  sha1="${sha1:0:40}"
  status=$(curl --user "$credentials" -X PUT -H "X-Checksum-Deploy:true" -H "X-Checksum-Sha1:$sha1" \
  --write-out %{http_code} --silent --output /dev/null "${destination}")
  # Either upload or output a status message
  if [ $status -eq 404 ] ; then
      echo "Uploading '$f' (cs=${sha1}) to '${destination}'"
      curl -k --user "$credentials" -H "X-Checksum-Sha1:$sha1" -T "$input_file" "${destination}"
  elif [[ $status == 2* ]] ; then
      echo "Uploading of ${destination} skipped, HTTP-Status: ${status}"
  else
      die "Checking of ${destination} failed, HTTP-Status: ${status}"
  fi
}

cd "$SCRIPT_DIR/.."
safe ./gradlew --console=plain --no-daemon --build-cache mavenDependencyExport --info
for REPO_DIR in $(find -name maven-dependency-export -type d); do
  pushd "$REPO_DIR"
  for FILE in $(find . -type f); do
    upload_to_artifactory $FILE
  done
  popd
done
